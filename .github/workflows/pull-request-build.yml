name: Build Preview App for Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions: write-all

jobs:
  check-command:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    outputs:
      build: ${{ steps.check.outputs.build }}
      build-linux: ${{ steps.check.outputs.build-linux }}
      build-mac: ${{ steps.check.outputs.build-mac }}
      build-win: ${{ steps.check.outputs.build-win }}
    steps:
      - name: Check PR comment
        id: check
        run: |
          PR_COMMENT="${{ github.event.comment.body }}"
          echo "build=$(echo "$PR_COMMENT" | grep -q '!build' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "build-linux=$(echo "$PR_COMMENT" | grep -q '!build-linux' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "build-mac=$(echo "$PR_COMMENT" | grep -q '!build-mac' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "build-win=$(echo "$PR_COMMENT" | grep -q '!build-win' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

  notify-build-start:
    runs-on: ubuntu-latest
    needs: check-command
    if: needs.check-command.outputs.build == 'true' || needs.check-command.outputs.build-linux == 'true' || needs.check-command.outputs.build-mac == 'true' || needs.check-command.outputs.build-win == 'true'
    outputs:
      comment-id: ${{ steps.create_comment.outputs.comment-id }}
    steps:
      - name: Comment PR
        id: create_comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: 'Building...'
            });
            console.log(`Comment ID: ${comment.id}`);
            core.setOutput('comment-id', comment.id);

  build-linux:
    needs: [check-command, notify-build-start]
    if: needs.check-command.outputs.build == 'true' || needs.check-command.outputs.build-linux == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install frontend dependencies
        run: npm install --legacy-peer-deps
        working-directory: ./frontend

      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      - name: Package and Build the Electron app
        run: |
          npm run make
        working-directory: ./backend

      - name: Archive the build
        run: |
          mkdir -p distributables/deb distributables/rpm
          cp ./backend/out/make/deb/**/*.deb distributables/deb/quick-finder-amd64.deb
          cp ./backend/out/make/rpm/**/*.rpm distributables/rpm/quick-finder-x86_64.rpm
          cd distributables
          zip -r quickfinder-linux.zip *
          cd ..

      - name: Upload the build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux
          path: distributables/*

  build-mac:
    needs: [check-command, notify-build-start]
    if: needs.check-command.outputs.build == 'true' || needs.check-command.outputs.build-mac == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install frontend dependencies
        run: npm install --legacy-peer-deps
        working-directory: ./frontend

      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      - name: Package and Build the Electron app
        run: |
          npm run make
        working-directory: ./backend

      - name: Collect built distributables
        run: |
          mkdir distributables
          cd ./backend/out/make
          cp *.dmg ../../../distributables/QuickFinder.dmg
          cd ../../..

      - name: Upload the build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-mac
          path: distributables/*

  build-win:
    needs: [check-command, notify-build-start]
    if: needs.check-command.outputs.build == 'true' || needs.check-command.outputs.build-win == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install frontend dependencies
        run: npm install --legacy-peer-deps
        working-directory: ./frontend

      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      - name: Package and Build the Electron app
        run: |
          npm run make
        working-directory: ./backend

      - name: Archive the build
        run: |
          mkdir distributables
          cd ./backend/out/make
          powershell Compress-Archive -Path * -DestinationPath ../../../distributables/quickfinder-windows.zip
          cd ../../..

      - name: Upload the build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: distributables/*

  notify-build-result:
    runs-on: ubuntu-latest
    needs:
      [check-command, notify-build-start, build-linux, build-mac, build-win]
    if: always() && (needs.check-command.outputs.build == 'true' || needs.check-command.outputs.build-linux == 'true' || needs.check-command.outputs.build-mac == 'true' || needs.check-command.outputs.build-win == 'true')
    steps:
      - name: Check build status
        id: check_status
        run: |
          if [[ "${{ needs.build-linux.result }}" == "failure" || "${{ needs.build-mac.result }}" == "failure" || "${{ needs.build-win.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Update PR Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const runURL = `https://github.com/${context.repo.owner}/${context.repo.name}/actions/runs/${context.runId}`;

            let body = `Build ${steps.check_status.outputs.status === 'success' ? 'Successful' : 'Failed'}!\n\nJob Run URL: ${runURL}\n\n`;

            if (steps.check_status.outputs.status === 'success') {
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.name,
                run_id: context.runId
              });
              
              for (const artifact of artifacts.data.artifacts) {
                const downloadUrl = `${runURL}/artifacts/${artifact.id}`;
                body += `[Download ${artifact.name}](${downloadUrl})\n`;
              }
            } else {
              body += 'Please check the build logs for more details.';
            }

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              comment_id: ${{ needs.notify-build-start.outputs.comment-id }},
              body: body
            });
